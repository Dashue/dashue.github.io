<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Johan Nilssons blog</title><link>http://www.johanilsson.com/feed.xml</link><description>Johan Nilssons blog</description><item><guid isPermaLink="true">http://www.johanilsson.com/2013/10/migrating-to-sandra-snow/</guid><link>http://www.johanilsson.com/2013/10/migrating-to-sandra-snow/</link><title>Migrating To Sandra.Snow</title><description>&lt;h1&gt;Migrating to Sandra.Snow&lt;/h1&gt;

&lt;p&gt;Having tried hosting my blog on tumblr, my own wordpress instance and wordpress online I've never been really happy. To me, writing should be simple and easy, so when I first heard of Sandra.Snow: A solution to freely host your blog on github pages with full control over everything, I jumped on it!&lt;/p&gt;

&lt;p&gt;First thing I had to do was migrate my original posts (html) off of wordpress. The other people using Sandra.Snow that I know of created a Wordpress export file and manually started to migrate posts over. I on the other hand claimed "Why spend 2 hours of manual labour when I can spend two weeks to automate the process". In hindsight not the best approach :) , but from it were two open source solutions born:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nuget.org/packages/HtmlToMarkdown.Net/"&gt;Html To Markdown.Net&lt;/a&gt;  &lt;em&gt;(Apparently this didn´t exist already)&lt;/em&gt;&lt;br /&gt;
&lt;a href="https://github.com/Dashue/FromWordpressToSandraSnow"&gt;From Wordpress To Sandra.Snow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in the following days I will continue to sanity-check old posts and publish them here.&lt;br /&gt;
&lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Fork from here&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://jabbr.net/#/rooms/SandraSnow"&gt;Questions goes here&lt;/a&gt;&lt;/p&gt;
</description><pubDate>Mon, 21 Oct 2013 04:00:00 Z</pubDate><a10:updated>2013-10-21T04:00:00Z</a10:updated><a10:content type="text">&lt;h1&gt;Migrating to Sandra.Snow&lt;/h1&gt;

&lt;p&gt;Having tried hosting my blog on tumblr, my own wordpress instance and wordpress online I've never been really happy. To me, writing should be simple and easy, so when I first heard of Sandra.Snow: A solution to freely host your blog on github pages with full control over everything, I jumped on it!&lt;/p&gt;

&lt;p&gt;First thing I had to do was migrate my original posts (html) off of wordpress. The other people using Sandra.Snow that I know of created a Wordpress export file and manually started to migrate posts over. I on the other hand claimed "Why spend 2 hours of manual labour when I can spend two weeks to automate the process". In hindsight not the best approach :) , but from it were two open source solutions born:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.nuget.org/packages/HtmlToMarkdown.Net/"&gt;Html To Markdown.Net&lt;/a&gt;  &lt;em&gt;(Apparently this didn´t exist already)&lt;/em&gt;&lt;br /&gt;
&lt;a href="https://github.com/Dashue/FromWordpressToSandraSnow"&gt;From Wordpress To Sandra.Snow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in the following days I will continue to sanity-check old posts and publish them here.&lt;br /&gt;
&lt;a href="https://github.com/Sandra/Sandra.Snow"&gt;Fork from here&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://jabbr.net/#/rooms/SandraSnow"&gt;Questions goes here&lt;/a&gt;&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.johanilsson.com/2011/11/regions/</guid><link>http://www.johanilsson.com/2011/11/regions/</link><title>Regions!?!</title><description>&lt;p&gt;I do hate regions and here's why!&lt;/p&gt;

&lt;p&gt;A region isn't an anti-pattern or even a code smell in itself but it is often used as a means to hide them. Regions are for folding code and to "hide" it, and I'm wondering, what are you hiding, wouldn't it be better to take some pride in your work, invest some time and refactor your code so you don't have to hide it? &lt;/p&gt;

&lt;p&gt;A region is more often than not an indication of that something needs to be renamed, refactored and sometimes even rewritten into new functions, value-objects or even classes.&lt;/p&gt;

&lt;p&gt;I still haven't been presented with a valid use of regions, and the ones that keep coming up are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Separating different functionality in a method - &lt;em&gt;Hello? Have you forgotten that methods should be short and do one thing only. If your method does more than one thing, don't separate it into regions, refactor it into more methods! Giving you a "Table of Content" of the functionality being called.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grouping different kind of class members together - Hello? Heard about stylecop, this is what it's for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hiding generated code - Hello? Heard about partial classes?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dividing contents in my large class - Hello? Give me your email and I'll send you a book about this latest thing called OO programming and Inheritance&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion: &lt;strong&gt;Regions are a bad practice both inside and outside of methods!&lt;/strong&gt; Stay away from those regions, refactor your code, implement stylecop for sorting class members and learn how to navigate using visual studio or resharper.&lt;/p&gt;
</description><pubDate>Fri, 04 Nov 2011 04:00:00 Z</pubDate><a10:updated>2011-11-04T04:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;I do hate regions and here's why!&lt;/p&gt;

&lt;p&gt;A region isn't an anti-pattern or even a code smell in itself but it is often used as a means to hide them. Regions are for folding code and to "hide" it, and I'm wondering, what are you hiding, wouldn't it be better to take some pride in your work, invest some time and refactor your code so you don't have to hide it? &lt;/p&gt;

&lt;p&gt;A region is more often than not an indication of that something needs to be renamed, refactored and sometimes even rewritten into new functions, value-objects or even classes.&lt;/p&gt;

&lt;p&gt;I still haven't been presented with a valid use of regions, and the ones that keep coming up are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Separating different functionality in a method - &lt;em&gt;Hello? Have you forgotten that methods should be short and do one thing only. If your method does more than one thing, don't separate it into regions, refactor it into more methods! Giving you a "Table of Content" of the functionality being called.&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Grouping different kind of class members together - Hello? Heard about stylecop, this is what it's for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hiding generated code - Hello? Heard about partial classes?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dividing contents in my large class - Hello? Give me your email and I'll send you a book about this latest thing called OO programming and Inheritance&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conclusion: &lt;strong&gt;Regions are a bad practice both inside and outside of methods!&lt;/strong&gt; Stay away from those regions, refactor your code, implement stylecop for sorting class members and learn how to navigate using visual studio or resharper.&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.johanilsson.com/2011/11/todays-refactoring-dictionary-usage/</guid><link>http://www.johanilsson.com/2011/11/todays-refactoring-dictionary-usage/</link><title>Todays Refactoring: Dictionary usage</title><description>&lt;p&gt;Code like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (dictionary.ContainsKey(key))
{
  dictionary[key] = value;  
}
else
{
  dictionary.Add(key, value);  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can be substituted with the following with the same functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dictionary[key] = value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code will be cleaner, functionality will be the same and a few operations faster :P&lt;/p&gt;
</description><pubDate>Tue, 01 Nov 2011 04:00:00 Z</pubDate><a10:updated>2011-11-01T04:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;Code like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (dictionary.ContainsKey(key))
{
  dictionary[key] = value;  
}
else
{
  dictionary.Add(key, value);  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can be substituted with the following with the same functionality:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dictionary[key] = value;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code will be cleaner, functionality will be the same and a few operations faster :P&lt;/p&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.johanilsson.com/2011/10/implicit-operators/</guid><link>http://www.johanilsson.com/2011/10/implicit-operators/</link><title>Implicit Operators</title><description>&lt;p&gt;Mapping occur in many places in applications, mostly in boundaries between layers. Mapping one type to another, be it server to client DTOs or something else, there are numerous ways of accomplishing it. Some use a static Mapper factory, some use tools like AutoMapper, my preferred way of doing it is with the use of Implicit Operators.&lt;/p&gt;

&lt;p&gt;Like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var domainModel = new DomainModel
{
    Firstname = "Firstname",
    Lastname = "Lastname"
};

ViewModel viewModel = domainModel;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What allows us to do this is something called an "Implicit Operator". Which are defined like below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private class ViewModel
{
    public string Name { get; set; }

    public static implicit operator ViewModel(DomainModel model)
    {
        return new ViewModel
        {
            Name = model.Firstname + " " + model.Lastname
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!----&gt;

&lt;pre&gt;&lt;code&gt;private class DomainModel
{
    public string Firstname { get; set; }
    public string Lastname { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
</description><pubDate>Wed, 26 Oct 2011 04:00:00 Z</pubDate><a10:updated>2011-10-26T04:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;Mapping occur in many places in applications, mostly in boundaries between layers. Mapping one type to another, be it server to client DTOs or something else, there are numerous ways of accomplishing it. Some use a static Mapper factory, some use tools like AutoMapper, my preferred way of doing it is with the use of Implicit Operators.&lt;/p&gt;

&lt;p&gt;Like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var domainModel = new DomainModel
{
    Firstname = "Firstname",
    Lastname = "Lastname"
};

ViewModel viewModel = domainModel;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What allows us to do this is something called an "Implicit Operator". Which are defined like below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private class ViewModel
{
    public string Name { get; set; }

    public static implicit operator ViewModel(DomainModel model)
    {
        return new ViewModel
        {
            Name = model.Firstname + " " + model.Lastname
        };
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;!----&gt;

&lt;pre&gt;&lt;code&gt;private class DomainModel
{
    public string Firstname { get; set; }
    public string Lastname { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
</a10:content></item><item><guid isPermaLink="true">http://www.johanilsson.com/2011/10/brainfart-when-sorting-lists/</guid><link>http://www.johanilsson.com/2011/10/brainfart-when-sorting-lists/</link><title>Brainfart when sorting Lists</title><description>&lt;p&gt;Just encountered this piece of code today:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array.Sort(myList.ToArray());
foreach(var i in myList)
{ // Do something with i }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My first though was “Wait what?” Is there some hidden functionality of List.ToArray() that I have missed which only is passed onto jedi masters? Does this way of sorting perform better than just List.Sort?&lt;/p&gt;

&lt;p&gt;I had to investigate, so I wrote up this little code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var list = new List&amp;lt;int&amp;amp;gt; {9, 4, 7, 1, 2};

Array.Sort(list.ToArray());
foreach (var i in list)
{
   Console.WriteLine(i);
}

Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo and behold the printed sequence is: 9 4 7 1 2, hence we are creating an array, sorting it then throwing it away, only to use our list in the foreach.&lt;/p&gt;

&lt;p&gt;List.Sort uses Array.Sort internally so I would dare go out on a limb and say that speed for sorting should be the same&lt;/p&gt;
</description><pubDate>Mon, 24 Oct 2011 04:00:00 Z</pubDate><a10:updated>2011-10-24T04:00:00Z</a10:updated><a10:content type="text">&lt;p&gt;Just encountered this piece of code today:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Array.Sort(myList.ToArray());
foreach(var i in myList)
{ // Do something with i }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My first though was “Wait what?” Is there some hidden functionality of List.ToArray() that I have missed which only is passed onto jedi masters? Does this way of sorting perform better than just List.Sort?&lt;/p&gt;

&lt;p&gt;I had to investigate, so I wrote up this little code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var list = new List&amp;lt;int&amp;amp;gt; {9, 4, 7, 1, 2};

Array.Sort(list.ToArray());
foreach (var i in list)
{
   Console.WriteLine(i);
}

Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo and behold the printed sequence is: 9 4 7 1 2, hence we are creating an array, sorting it then throwing it away, only to use our list in the foreach.&lt;/p&gt;

&lt;p&gt;List.Sort uses Array.Sort internally so I would dare go out on a limb and say that speed for sorting should be the same&lt;/p&gt;
</a10:content></item></channel></rss>